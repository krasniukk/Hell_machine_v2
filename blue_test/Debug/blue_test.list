
blue_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000026a0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08002828  08002828  00012828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800294c  0800294c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800294c  0800294c  0001294c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002954  08002954  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002954  08002954  00012954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002958  08002958  00012958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800295c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000e8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200000f4  200000f4  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009031  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001762  00000000  00000000  0002906d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000678  00000000  00000000  0002a7d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000005e0  00000000  00000000  0002ae48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f827  00000000  00000000  0002b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000090ce  00000000  00000000  0004ac4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000be7d8  00000000  00000000  00053d1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001124f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001870  00000000  00000000  00112548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002810 	.word	0x08002810

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002810 	.word	0x08002810

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b08a      	sub	sp, #40	; 0x28
 80004c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004c6:	f107 0314 	add.w	r3, r7, #20
 80004ca:	2200      	movs	r2, #0
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	605a      	str	r2, [r3, #4]
 80004d0:	609a      	str	r2, [r3, #8]
 80004d2:	60da      	str	r2, [r3, #12]
 80004d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	2300      	movs	r3, #0
 80004d8:	613b      	str	r3, [r7, #16]
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <MX_GPIO_Init+0xb8>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	4a26      	ldr	r2, [pc, #152]	; (8000578 <MX_GPIO_Init+0xb8>)
 80004e0:	f043 0304 	orr.w	r3, r3, #4
 80004e4:	6313      	str	r3, [r2, #48]	; 0x30
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <MX_GPIO_Init+0xb8>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	f003 0304 	and.w	r3, r3, #4
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MX_GPIO_Init+0xb8>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a1f      	ldr	r2, [pc, #124]	; (8000578 <MX_GPIO_Init+0xb8>)
 80004fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_GPIO_Init+0xb8>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_GPIO_Init+0xb8>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <MX_GPIO_Init+0xb8>)
 8000518:	f043 0301 	orr.w	r3, r3, #1
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_GPIO_Init+0xb8>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	60bb      	str	r3, [r7, #8]
 8000528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_GPIO_Init+0xb8>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a11      	ldr	r2, [pc, #68]	; (8000578 <MX_GPIO_Init+0xb8>)
 8000534:	f043 0308 	orr.w	r3, r3, #8
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_GPIO_Init+0xb8>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0308 	and.w	r3, r3, #8
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <MX_GPIO_Init+0xbc>)
 800054e:	f000 feb9 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8000552:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000556:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	4619      	mov	r1, r3
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_GPIO_Init+0xbc>)
 800056c:	f000 fbca 	bl	8000d04 <HAL_GPIO_Init>

}
 8000570:	bf00      	nop
 8000572:	3728      	adds	r7, #40	; 0x28
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	40020c00 	.word	0x40020c00

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 fa0b 	bl	80009a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f853 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f7ff ff97 	bl	80004c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f961 	bl	8000858 <MX_USART2_UART_Init>
//  HAL_UART_Receive_IT(blue_tooth_uart,(uint8_t*)buffer,1);

  while (1)
  {
		uint8_t command;
		HAL_UART_Receive(&MYUART, &command,  sizeof command, 0xffff); // отправляем обратно что получили
 8000596:	1df9      	adds	r1, r7, #7
 8000598:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800059c:	2201      	movs	r2, #1
 800059e:	481f      	ldr	r0, [pc, #124]	; (800061c <main+0x9c>)
 80005a0:	f001 fdf0 	bl	8002184 <HAL_UART_Receive>


		switch (command) {
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	3b31      	subs	r3, #49	; 0x31
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d8f4      	bhi.n	8000596 <main+0x16>
 80005ac:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <main+0x34>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	080005c9 	.word	0x080005c9
 80005b8:	080005d9 	.word	0x080005d9
 80005bc:	080005e9 	.word	0x080005e9
 80005c0:	080005f9 	.word	0x080005f9
 80005c4:	08000609 	.word	0x08000609
		case 49:
			HAL_UART_Transmit(&MYUART,(uint8_t*)"hello", 5, 1000);
 80005c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005cc:	2205      	movs	r2, #5
 80005ce:	4914      	ldr	r1, [pc, #80]	; (8000620 <main+0xa0>)
 80005d0:	4812      	ldr	r0, [pc, #72]	; (800061c <main+0x9c>)
 80005d2:	f001 fd45 	bl	8002060 <HAL_UART_Transmit>
			break;
 80005d6:	e01f      	b.n	8000618 <main+0x98>
		case 50:
			HAL_UART_Transmit(&MYUART,(uint8_t*)"2", 1, 1000);
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	2201      	movs	r2, #1
 80005de:	4911      	ldr	r1, [pc, #68]	; (8000624 <main+0xa4>)
 80005e0:	480e      	ldr	r0, [pc, #56]	; (800061c <main+0x9c>)
 80005e2:	f001 fd3d 	bl	8002060 <HAL_UART_Transmit>
			break;
 80005e6:	e017      	b.n	8000618 <main+0x98>
		case 51:
			HAL_UART_Transmit(&MYUART,(uint8_t*)"64736", 5, 1000);
 80005e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ec:	2205      	movs	r2, #5
 80005ee:	490e      	ldr	r1, [pc, #56]	; (8000628 <main+0xa8>)
 80005f0:	480a      	ldr	r0, [pc, #40]	; (800061c <main+0x9c>)
 80005f2:	f001 fd35 	bl	8002060 <HAL_UART_Transmit>
			break;
 80005f6:	e00f      	b.n	8000618 <main+0x98>
		case 52:
			HAL_UART_Transmit(&MYUART,(uint8_t*)"224", 3, 1000);
 80005f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fc:	2203      	movs	r2, #3
 80005fe:	490b      	ldr	r1, [pc, #44]	; (800062c <main+0xac>)
 8000600:	4806      	ldr	r0, [pc, #24]	; (800061c <main+0x9c>)
 8000602:	f001 fd2d 	bl	8002060 <HAL_UART_Transmit>
			break;
 8000606:	e007      	b.n	8000618 <main+0x98>
		case 53:
			HAL_UART_Transmit(&MYUART,(uint8_t*)"5000", 4, 1000);
 8000608:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060c:	2204      	movs	r2, #4
 800060e:	4908      	ldr	r1, [pc, #32]	; (8000630 <main+0xb0>)
 8000610:	4802      	ldr	r0, [pc, #8]	; (800061c <main+0x9c>)
 8000612:	f001 fd25 	bl	8002060 <HAL_UART_Transmit>
			break;
 8000616:	bf00      	nop
  {
 8000618:	e7bd      	b.n	8000596 <main+0x16>
 800061a:	bf00      	nop
 800061c:	200000ac 	.word	0x200000ac
 8000620:	08002828 	.word	0x08002828
 8000624:	08002830 	.word	0x08002830
 8000628:	08002834 	.word	0x08002834
 800062c:	0800283c 	.word	0x0800283c
 8000630:	08002840 	.word	0x08002840

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b094      	sub	sp, #80	; 0x50
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0320 	add.w	r3, r7, #32
 800063e:	2230      	movs	r2, #48	; 0x30
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f002 f8dc 	bl	8002800 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	f107 030c 	add.w	r3, r7, #12
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000658:	2300      	movs	r3, #0
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	4b28      	ldr	r3, [pc, #160]	; (8000700 <SystemClock_Config+0xcc>)
 800065e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000660:	4a27      	ldr	r2, [pc, #156]	; (8000700 <SystemClock_Config+0xcc>)
 8000662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000666:	6413      	str	r3, [r2, #64]	; 0x40
 8000668:	4b25      	ldr	r3, [pc, #148]	; (8000700 <SystemClock_Config+0xcc>)
 800066a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800066c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000670:	60bb      	str	r3, [r7, #8]
 8000672:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000674:	2300      	movs	r3, #0
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	4b22      	ldr	r3, [pc, #136]	; (8000704 <SystemClock_Config+0xd0>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a21      	ldr	r2, [pc, #132]	; (8000704 <SystemClock_Config+0xd0>)
 800067e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000682:	6013      	str	r3, [r2, #0]
 8000684:	4b1f      	ldr	r3, [pc, #124]	; (8000704 <SystemClock_Config+0xd0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800068c:	607b      	str	r3, [r7, #4]
 800068e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000690:	2301      	movs	r3, #1
 8000692:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069a:	2302      	movs	r3, #2
 800069c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800069e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006a4:	2308      	movs	r3, #8
 80006a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006b2:	2307      	movs	r3, #7
 80006b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 fe34 	bl	8001328 <HAL_RCC_OscConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006c6:	f000 f81f 	bl	8000708 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ca:	230f      	movs	r3, #15
 80006cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ce:	2302      	movs	r3, #2
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006e0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2105      	movs	r1, #5
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f945 	bl	8001978 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006f4:	f000 f808 	bl	8000708 <Error_Handler>
  }
}
 80006f8:	bf00      	nop
 80006fa:	3750      	adds	r7, #80	; 0x50
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40023800 	.word	0x40023800
 8000704:	40007000 	.word	0x40007000

08000708 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800070c:	b672      	cpsid	i
}
 800070e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000710:	e7fe      	b.n	8000710 <Error_Handler+0x8>

08000712 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000712:	b480      	push	{r7}
 8000714:	b083      	sub	sp, #12
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
 800071a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	607b      	str	r3, [r7, #4]
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <HAL_MspInit+0x4c>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000736:	4a0f      	ldr	r2, [pc, #60]	; (8000774 <HAL_MspInit+0x4c>)
 8000738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800073c:	6453      	str	r3, [r2, #68]	; 0x44
 800073e:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <HAL_MspInit+0x4c>)
 8000740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	4b09      	ldr	r3, [pc, #36]	; (8000774 <HAL_MspInit+0x4c>)
 8000750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000752:	4a08      	ldr	r2, [pc, #32]	; (8000774 <HAL_MspInit+0x4c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000758:	6413      	str	r3, [r2, #64]	; 0x40
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <HAL_MspInit+0x4c>)
 800075c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000766:	2007      	movs	r0, #7
 8000768:	f000 fa5c 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800

08000778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800077c:	e7fe      	b.n	800077c <NMI_Handler+0x4>

0800077e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000782:	e7fe      	b.n	8000782 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	e7fe      	b.n	8000788 <MemManage_Handler+0x4>

0800078a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <UsageFault_Handler+0x4>

08000796 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr

080007a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b6:	bf00      	nop
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 f93e 	bl	8000a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if ((MYUART.Instance->SR & USART_SR_RXNE) != RESET) {
 80007d2:	4b14      	ldr	r3, [pc, #80]	; (8000824 <USART2_IRQHandler+0x58>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f003 0320 	and.w	r3, r3, #32
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d01b      	beq.n	8000818 <USART2_IRQHandler+0x4c>
		uint8_t rbyte = (uint8_t) (MYUART.Instance->DR & (uint8_t) 0x00FF); // читает байт из регистра
 80007e0:	4b10      	ldr	r3, [pc, #64]	; (8000824 <USART2_IRQHandler+0x58>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	71fb      	strb	r3, [r7, #7]
		uint16_t i = (uint16_t) (rx_buffer_head + 1) % UART_RX_BUFFER_SIZE;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <USART2_IRQHandler+0x5c>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	3301      	adds	r3, #1
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80007f6:	80bb      	strh	r3, [r7, #4]

		if (i != rx_buffer_tail) {
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <USART2_IRQHandler+0x60>)
 80007fa:	881b      	ldrh	r3, [r3, #0]
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	88ba      	ldrh	r2, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	d009      	beq.n	8000818 <USART2_IRQHandler+0x4c>
			rx_buffer[rx_buffer_head] = rbyte;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <USART2_IRQHandler+0x5c>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	b29b      	uxth	r3, r3
 800080a:	4619      	mov	r1, r3
 800080c:	4a08      	ldr	r2, [pc, #32]	; (8000830 <USART2_IRQHandler+0x64>)
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	5453      	strb	r3, [r2, r1]
			rx_buffer_head = i;
 8000812:	4a05      	ldr	r2, [pc, #20]	; (8000828 <USART2_IRQHandler+0x5c>)
 8000814:	88bb      	ldrh	r3, [r7, #4]
 8000816:	8013      	strh	r3, [r2, #0]
		}
	}

    return;
 8000818:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	200000ac 	.word	0x200000ac
 8000828:	20000028 	.word	0x20000028
 800082c:	2000002a 	.word	0x2000002a
 8000830:	2000002c 	.word	0x2000002c

08000834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <SystemInit+0x20>)
 800083a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800083e:	4a05      	ldr	r2, [pc, #20]	; (8000854 <SystemInit+0x20>)
 8000840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
 8000852:	bf00      	nop
 8000854:	e000ed00 	.word	0xe000ed00

08000858 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800085c:	4b11      	ldr	r3, [pc, #68]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 800085e:	4a12      	ldr	r2, [pc, #72]	; (80008a8 <MX_USART2_UART_Init+0x50>)
 8000860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000864:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0c      	ldr	r3, [pc, #48]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0b      	ldr	r3, [pc, #44]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b08      	ldr	r3, [pc, #32]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <MX_USART2_UART_Init+0x4c>)
 8000890:	f001 fb16 	bl	8001ec0 <HAL_UART_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800089a:	f7ff ff35 	bl	8000708 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200000ac 	.word	0x200000ac
 80008a8:	40004400 	.word	0x40004400

080008ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	; 0x28
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b4:	f107 0314 	add.w	r3, r7, #20
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_UART_MspInit+0x94>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d133      	bne.n	8000936 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d6:	4a1b      	ldr	r2, [pc, #108]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008dc:	6413      	str	r3, [r2, #64]	; 0x40
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a14      	ldr	r2, [pc, #80]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <HAL_UART_MspInit+0x98>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000906:	230c      	movs	r3, #12
 8000908:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800090a:	2302      	movs	r3, #2
 800090c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000912:	2303      	movs	r3, #3
 8000914:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000916:	2307      	movs	r3, #7
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4809      	ldr	r0, [pc, #36]	; (8000948 <HAL_UART_MspInit+0x9c>)
 8000922:	f000 f9ef 	bl	8000d04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2026      	movs	r0, #38	; 0x26
 800092c:	f000 f99a 	bl	8000c64 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000930:	2026      	movs	r0, #38	; 0x26
 8000932:	f000 f9c3 	bl	8000cbc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40004400 	.word	0x40004400
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000

0800094c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800094c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000984 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000950:	480d      	ldr	r0, [pc, #52]	; (8000988 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000952:	490e      	ldr	r1, [pc, #56]	; (800098c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000954:	4a0e      	ldr	r2, [pc, #56]	; (8000990 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000958:	e002      	b.n	8000960 <LoopCopyDataInit>

0800095a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800095a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800095c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095e:	3304      	adds	r3, #4

08000960 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000960:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000962:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000964:	d3f9      	bcc.n	800095a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000966:	4a0b      	ldr	r2, [pc, #44]	; (8000994 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000968:	4c0b      	ldr	r4, [pc, #44]	; (8000998 <LoopFillZerobss+0x26>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800096c:	e001      	b.n	8000972 <LoopFillZerobss>

0800096e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000970:	3204      	adds	r2, #4

08000972 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000972:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000974:	d3fb      	bcc.n	800096e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000976:	f7ff ff5d 	bl	8000834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800097a:	f001 ff1d 	bl	80027b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800097e:	f7ff fdff 	bl	8000580 <main>
  bx  lr    
 8000982:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800098c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000990:	0800295c 	.word	0x0800295c
  ldr r2, =_sbss
 8000994:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000998:	200000f4 	.word	0x200000f4

0800099c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800099c:	e7fe      	b.n	800099c <ADC_IRQHandler>
	...

080009a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <HAL_Init+0x40>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a0d      	ldr	r2, [pc, #52]	; (80009e0 <HAL_Init+0x40>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <HAL_Init+0x40>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_Init+0x40>)
 80009b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <HAL_Init+0x40>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a07      	ldr	r2, [pc, #28]	; (80009e0 <HAL_Init+0x40>)
 80009c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f000 f92b 	bl	8000c24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009ce:	2000      	movs	r0, #0
 80009d0:	f000 f808 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009d4:	f7ff fea8 	bl	8000728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40023c00 	.word	0x40023c00

080009e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_InitTick+0x54>)
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <HAL_InitTick+0x58>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	4619      	mov	r1, r3
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80009fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a02:	4618      	mov	r0, r3
 8000a04:	f000 f972 	bl	8000cec <HAL_SYSTICK_Config>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e00e      	b.n	8000a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b0f      	cmp	r3, #15
 8000a16:	d80a      	bhi.n	8000a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	6879      	ldr	r1, [r7, #4]
 8000a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a20:	f000 f920 	bl	8000c64 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a24:	4a06      	ldr	r2, [pc, #24]	; (8000a40 <HAL_InitTick+0x5c>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	e000      	b.n	8000a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a2e:	2301      	movs	r3, #1
}
 8000a30:	4618      	mov	r0, r3
 8000a32:	3708      	adds	r7, #8
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bd80      	pop	{r7, pc}
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000004 	.word	0x20000004

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200000f0 	.word	0x200000f0

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000f0 	.word	0x200000f0

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
	...

08000be0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf0:	d301      	bcc.n	8000bf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	e00f      	b.n	8000c16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <SysTick_Config+0x40>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bfe:	210f      	movs	r1, #15
 8000c00:	f04f 30ff 	mov.w	r0, #4294967295
 8000c04:	f7ff ff8e 	bl	8000b24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	4b05      	ldr	r3, [pc, #20]	; (8000c20 <SysTick_Config+0x40>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <SysTick_Config+0x40>)
 8000c10:	2207      	movs	r2, #7
 8000c12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c14:	2300      	movs	r3, #0
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	e000e010 	.word	0xe000e010

08000c24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	2b07      	cmp	r3, #7
 8000c30:	d00f      	beq.n	8000c52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	2b06      	cmp	r3, #6
 8000c36:	d00c      	beq.n	8000c52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2b05      	cmp	r3, #5
 8000c3c:	d009      	beq.n	8000c52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d006      	beq.n	8000c52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d003      	beq.n	8000c52 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000c4a:	2192      	movs	r1, #146	; 0x92
 8000c4c:	4804      	ldr	r0, [pc, #16]	; (8000c60 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000c4e:	f7ff fd60 	bl	8000712 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff ff16 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	08002848 	.word	0x08002848

08000c64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	60b9      	str	r1, [r7, #8]
 8000c6e:	607a      	str	r2, [r7, #4]
 8000c70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b0f      	cmp	r3, #15
 8000c7a:	d903      	bls.n	8000c84 <HAL_NVIC_SetPriority+0x20>
 8000c7c:	21aa      	movs	r1, #170	; 0xaa
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <HAL_NVIC_SetPriority+0x54>)
 8000c80:	f7ff fd47 	bl	8000712 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	2b0f      	cmp	r3, #15
 8000c88:	d903      	bls.n	8000c92 <HAL_NVIC_SetPriority+0x2e>
 8000c8a:	21ab      	movs	r1, #171	; 0xab
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <HAL_NVIC_SetPriority+0x54>)
 8000c8e:	f7ff fd40 	bl	8000712 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c92:	f7ff ff1b 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	68b9      	ldr	r1, [r7, #8]
 8000c9c:	6978      	ldr	r0, [r7, #20]
 8000c9e:	f7ff ff6b 	bl	8000b78 <NVIC_EncodePriority>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff3a 	bl	8000b24 <__NVIC_SetPriority>
}
 8000cb0:	bf00      	nop
 8000cb2:	3718      	adds	r7, #24
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	08002848 	.word	0x08002848

08000cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	da03      	bge.n	8000cd6 <HAL_NVIC_EnableIRQ+0x1a>
 8000cce:	21be      	movs	r1, #190	; 0xbe
 8000cd0:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <HAL_NVIC_EnableIRQ+0x2c>)
 8000cd2:	f7ff fd1e 	bl	8000712 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff04 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000ce0:	bf00      	nop
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08002848 	.word	0x08002848

08000cec <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff73 	bl	8000be0 <SysTick_Config>
 8000cfa:	4603      	mov	r3, r0
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a39      	ldr	r2, [pc, #228]	; (8000e04 <HAL_GPIO_Init+0x100>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d023      	beq.n	8000d6a <HAL_GPIO_Init+0x66>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4a38      	ldr	r2, [pc, #224]	; (8000e08 <HAL_GPIO_Init+0x104>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d01f      	beq.n	8000d6a <HAL_GPIO_Init+0x66>
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a37      	ldr	r2, [pc, #220]	; (8000e0c <HAL_GPIO_Init+0x108>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d01b      	beq.n	8000d6a <HAL_GPIO_Init+0x66>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a36      	ldr	r2, [pc, #216]	; (8000e10 <HAL_GPIO_Init+0x10c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d017      	beq.n	8000d6a <HAL_GPIO_Init+0x66>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a35      	ldr	r2, [pc, #212]	; (8000e14 <HAL_GPIO_Init+0x110>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d013      	beq.n	8000d6a <HAL_GPIO_Init+0x66>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a34      	ldr	r2, [pc, #208]	; (8000e18 <HAL_GPIO_Init+0x114>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d00f      	beq.n	8000d6a <HAL_GPIO_Init+0x66>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a33      	ldr	r2, [pc, #204]	; (8000e1c <HAL_GPIO_Init+0x118>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d00b      	beq.n	8000d6a <HAL_GPIO_Init+0x66>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a32      	ldr	r2, [pc, #200]	; (8000e20 <HAL_GPIO_Init+0x11c>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d007      	beq.n	8000d6a <HAL_GPIO_Init+0x66>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a31      	ldr	r2, [pc, #196]	; (8000e24 <HAL_GPIO_Init+0x120>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d003      	beq.n	8000d6a <HAL_GPIO_Init+0x66>
 8000d62:	21ac      	movs	r1, #172	; 0xac
 8000d64:	4830      	ldr	r0, [pc, #192]	; (8000e28 <HAL_GPIO_Init+0x124>)
 8000d66:	f7ff fcd4 	bl	8000712 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <HAL_GPIO_Init+0x7c>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	0c1b      	lsrs	r3, r3, #16
 8000d7a:	041b      	lsls	r3, r3, #16
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d003      	beq.n	8000d88 <HAL_GPIO_Init+0x84>
 8000d80:	21ad      	movs	r1, #173	; 0xad
 8000d82:	4829      	ldr	r0, [pc, #164]	; (8000e28 <HAL_GPIO_Init+0x124>)
 8000d84:	f7ff fcc5 	bl	8000712 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d035      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d031      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	2b11      	cmp	r3, #17
 8000d9e:	d02d      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d029      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2b12      	cmp	r3, #18
 8000dae:	d025      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8000db8:	d020      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8000dc2:	d01b      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8000dcc:	d016      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8000dd6:	d011      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8000de0:	d00c      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8000dea:	d007      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	2b03      	cmp	r3, #3
 8000df2:	d003      	beq.n	8000dfc <HAL_GPIO_Init+0xf8>
 8000df4:	21ae      	movs	r1, #174	; 0xae
 8000df6:	480c      	ldr	r0, [pc, #48]	; (8000e28 <HAL_GPIO_Init+0x124>)
 8000df8:	f7ff fc8b 	bl	8000712 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]
 8000e00:	e240      	b.n	8001284 <HAL_GPIO_Init+0x580>
 8000e02:	bf00      	nop
 8000e04:	40020000 	.word	0x40020000
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020800 	.word	0x40020800
 8000e10:	40020c00 	.word	0x40020c00
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40021400 	.word	0x40021400
 8000e1c:	40021800 	.word	0x40021800
 8000e20:	40021c00 	.word	0x40021c00
 8000e24:	40022000 	.word	0x40022000
 8000e28:	08002884 	.word	0x08002884
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 821a 	bne.w	800127e <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d005      	beq.n	8000e62 <HAL_GPIO_Init+0x15e>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d144      	bne.n	8000eec <HAL_GPIO_Init+0x1e8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	68db      	ldr	r3, [r3, #12]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d00f      	beq.n	8000e8a <HAL_GPIO_Init+0x186>
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	68db      	ldr	r3, [r3, #12]
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d00b      	beq.n	8000e8a <HAL_GPIO_Init+0x186>
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	68db      	ldr	r3, [r3, #12]
 8000e76:	2b02      	cmp	r3, #2
 8000e78:	d007      	beq.n	8000e8a <HAL_GPIO_Init+0x186>
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	2b03      	cmp	r3, #3
 8000e80:	d003      	beq.n	8000e8a <HAL_GPIO_Init+0x186>
 8000e82:	21c0      	movs	r1, #192	; 0xc0
 8000e84:	4892      	ldr	r0, [pc, #584]	; (80010d0 <HAL_GPIO_Init+0x3cc>)
 8000e86:	f7ff fc44 	bl	8000712 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d027      	beq.n	8000f48 <HAL_GPIO_Init+0x244>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d00b      	beq.n	8000f18 <HAL_GPIO_Init+0x214>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x214>
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d003      	beq.n	8000f18 <HAL_GPIO_Init+0x214>
 8000f10:	21d1      	movs	r1, #209	; 0xd1
 8000f12:	486f      	ldr	r0, [pc, #444]	; (80010d0 <HAL_GPIO_Init+0x3cc>)
 8000f14:	f7ff fbfd 	bl	8000712 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f003 0303 	and.w	r3, r3, #3
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	f040 80bf 	bne.w	80010d4 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f000 8093 	beq.w	8001086 <HAL_GPIO_Init+0x382>
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	691b      	ldr	r3, [r3, #16]
 8000f64:	2b09      	cmp	r3, #9
 8000f66:	f000 808e 	beq.w	8001086 <HAL_GPIO_Init+0x382>
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	691b      	ldr	r3, [r3, #16]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	f000 8089 	beq.w	8001086 <HAL_GPIO_Init+0x382>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 8084 	beq.w	8001086 <HAL_GPIO_Init+0x382>
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d07f      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	691b      	ldr	r3, [r3, #16]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d07b      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	691b      	ldr	r3, [r3, #16]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d077      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	691b      	ldr	r3, [r3, #16]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d073      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	d06f      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d06b      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	2b02      	cmp	r3, #2
 8000fb4:	d067      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d063      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	691b      	ldr	r3, [r3, #16]
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	d05f      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	691b      	ldr	r3, [r3, #16]
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	d05b      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	691b      	ldr	r3, [r3, #16]
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	d057      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b05      	cmp	r3, #5
 8000fdc:	d053      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	691b      	ldr	r3, [r3, #16]
 8000fe2:	2b05      	cmp	r3, #5
 8000fe4:	d04f      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	2b09      	cmp	r3, #9
 8000fec:	d04b      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	691b      	ldr	r3, [r3, #16]
 8000ff2:	2b06      	cmp	r3, #6
 8000ff4:	d047      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	691b      	ldr	r3, [r3, #16]
 8000ffa:	2b09      	cmp	r3, #9
 8000ffc:	d043      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	2b07      	cmp	r3, #7
 8001004:	d03f      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	2b07      	cmp	r3, #7
 800100c:	d03b      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b07      	cmp	r3, #7
 8001014:	d037      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	691b      	ldr	r3, [r3, #16]
 800101a:	2b08      	cmp	r3, #8
 800101c:	d033      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	691b      	ldr	r3, [r3, #16]
 8001022:	2b08      	cmp	r3, #8
 8001024:	d02f      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b08      	cmp	r3, #8
 800102c:	d02b      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	2b09      	cmp	r3, #9
 8001034:	d027      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	2b09      	cmp	r3, #9
 800103c:	d023      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	691b      	ldr	r3, [r3, #16]
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d01f      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b0a      	cmp	r3, #10
 800104c:	d01b      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	2b0b      	cmp	r3, #11
 8001054:	d017      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	691b      	ldr	r3, [r3, #16]
 800105a:	2b0c      	cmp	r3, #12
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	691b      	ldr	r3, [r3, #16]
 8001062:	2b0c      	cmp	r3, #12
 8001064:	d00f      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	691b      	ldr	r3, [r3, #16]
 800106a:	2b0d      	cmp	r3, #13
 800106c:	d00b      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	691b      	ldr	r3, [r3, #16]
 8001072:	2b0c      	cmp	r3, #12
 8001074:	d007      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691b      	ldr	r3, [r3, #16]
 800107a:	2b0f      	cmp	r3, #15
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x382>
 800107e:	21de      	movs	r1, #222	; 0xde
 8001080:	4813      	ldr	r0, [pc, #76]	; (80010d0 <HAL_GPIO_Init+0x3cc>)
 8001082:	f7ff fb46 	bl	8000712 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	69b9      	ldr	r1, [r7, #24]
 80010ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80010ce:	e001      	b.n	80010d4 <HAL_GPIO_Init+0x3d0>
 80010d0:	08002884 	.word	0x08002884
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	2203      	movs	r2, #3
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f003 0203 	and.w	r2, r3, #3
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	005b      	lsls	r3, r3, #1
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4313      	orrs	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80b4 	beq.w	800127e <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	4b5f      	ldr	r3, [pc, #380]	; (8001298 <HAL_GPIO_Init+0x594>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a5e      	ldr	r2, [pc, #376]	; (8001298 <HAL_GPIO_Init+0x594>)
 8001120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b5c      	ldr	r3, [pc, #368]	; (8001298 <HAL_GPIO_Init+0x594>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001132:	4a5a      	ldr	r2, [pc, #360]	; (800129c <HAL_GPIO_Init+0x598>)
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	089b      	lsrs	r3, r3, #2
 8001138:	3302      	adds	r3, #2
 800113a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0303 	and.w	r3, r3, #3
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	220f      	movs	r2, #15
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a51      	ldr	r2, [pc, #324]	; (80012a0 <HAL_GPIO_Init+0x59c>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d02b      	beq.n	80011b6 <HAL_GPIO_Init+0x4b2>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a50      	ldr	r2, [pc, #320]	; (80012a4 <HAL_GPIO_Init+0x5a0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d025      	beq.n	80011b2 <HAL_GPIO_Init+0x4ae>
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4a4f      	ldr	r2, [pc, #316]	; (80012a8 <HAL_GPIO_Init+0x5a4>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d01f      	beq.n	80011ae <HAL_GPIO_Init+0x4aa>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4a4e      	ldr	r2, [pc, #312]	; (80012ac <HAL_GPIO_Init+0x5a8>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d019      	beq.n	80011aa <HAL_GPIO_Init+0x4a6>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4a4d      	ldr	r2, [pc, #308]	; (80012b0 <HAL_GPIO_Init+0x5ac>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d013      	beq.n	80011a6 <HAL_GPIO_Init+0x4a2>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4c      	ldr	r2, [pc, #304]	; (80012b4 <HAL_GPIO_Init+0x5b0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d00d      	beq.n	80011a2 <HAL_GPIO_Init+0x49e>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4b      	ldr	r2, [pc, #300]	; (80012b8 <HAL_GPIO_Init+0x5b4>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d007      	beq.n	800119e <HAL_GPIO_Init+0x49a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4a      	ldr	r2, [pc, #296]	; (80012bc <HAL_GPIO_Init+0x5b8>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d101      	bne.n	800119a <HAL_GPIO_Init+0x496>
 8001196:	2307      	movs	r3, #7
 8001198:	e00e      	b.n	80011b8 <HAL_GPIO_Init+0x4b4>
 800119a:	2308      	movs	r3, #8
 800119c:	e00c      	b.n	80011b8 <HAL_GPIO_Init+0x4b4>
 800119e:	2306      	movs	r3, #6
 80011a0:	e00a      	b.n	80011b8 <HAL_GPIO_Init+0x4b4>
 80011a2:	2305      	movs	r3, #5
 80011a4:	e008      	b.n	80011b8 <HAL_GPIO_Init+0x4b4>
 80011a6:	2304      	movs	r3, #4
 80011a8:	e006      	b.n	80011b8 <HAL_GPIO_Init+0x4b4>
 80011aa:	2303      	movs	r3, #3
 80011ac:	e004      	b.n	80011b8 <HAL_GPIO_Init+0x4b4>
 80011ae:	2302      	movs	r3, #2
 80011b0:	e002      	b.n	80011b8 <HAL_GPIO_Init+0x4b4>
 80011b2:	2301      	movs	r3, #1
 80011b4:	e000      	b.n	80011b8 <HAL_GPIO_Init+0x4b4>
 80011b6:	2300      	movs	r3, #0
 80011b8:	69fa      	ldr	r2, [r7, #28]
 80011ba:	f002 0203 	and.w	r2, r2, #3
 80011be:	0092      	lsls	r2, r2, #2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011c8:	4934      	ldr	r1, [pc, #208]	; (800129c <HAL_GPIO_Init+0x598>)
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011d6:	4b3a      	ldr	r3, [pc, #232]	; (80012c0 <HAL_GPIO_Init+0x5bc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	43db      	mvns	r3, r3
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	4013      	ands	r3, r2
 80011e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d003      	beq.n	80011fa <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011fa:	4a31      	ldr	r2, [pc, #196]	; (80012c0 <HAL_GPIO_Init+0x5bc>)
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001200:	4b2f      	ldr	r3, [pc, #188]	; (80012c0 <HAL_GPIO_Init+0x5bc>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	43db      	mvns	r3, r3
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	4013      	ands	r3, r2
 800120e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d003      	beq.n	8001224 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	4313      	orrs	r3, r2
 8001222:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001224:	4a26      	ldr	r2, [pc, #152]	; (80012c0 <HAL_GPIO_Init+0x5bc>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <HAL_GPIO_Init+0x5bc>)
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	43db      	mvns	r3, r3
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	4013      	ands	r3, r2
 8001238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001242:	2b00      	cmp	r3, #0
 8001244:	d003      	beq.n	800124e <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4313      	orrs	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800124e:	4a1c      	ldr	r2, [pc, #112]	; (80012c0 <HAL_GPIO_Init+0x5bc>)
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001254:	4b1a      	ldr	r3, [pc, #104]	; (80012c0 <HAL_GPIO_Init+0x5bc>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	43db      	mvns	r3, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d003      	beq.n	8001278 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8001270:	69ba      	ldr	r2, [r7, #24]
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001278:	4a11      	ldr	r2, [pc, #68]	; (80012c0 <HAL_GPIO_Init+0x5bc>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	2b0f      	cmp	r3, #15
 8001288:	f67f add0 	bls.w	8000e2c <HAL_GPIO_Init+0x128>
      }
    }
  }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3720      	adds	r7, #32
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023800 	.word	0x40023800
 800129c:	40013800 	.word	0x40013800
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40020800 	.word	0x40020800
 80012ac:	40020c00 	.word	0x40020c00
 80012b0:	40021000 	.word	0x40021000
 80012b4:	40021400 	.word	0x40021400
 80012b8:	40021800 	.word	0x40021800
 80012bc:	40021c00 	.word	0x40021c00
 80012c0:	40013c00 	.word	0x40013c00

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80012d4:	887b      	ldrh	r3, [r7, #2]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d004      	beq.n	80012e4 <HAL_GPIO_WritePin+0x20>
 80012da:	887b      	ldrh	r3, [r7, #2]
 80012dc:	0c1b      	lsrs	r3, r3, #16
 80012de:	041b      	lsls	r3, r3, #16
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d004      	beq.n	80012ee <HAL_GPIO_WritePin+0x2a>
 80012e4:	f240 119d 	movw	r1, #413	; 0x19d
 80012e8:	480e      	ldr	r0, [pc, #56]	; (8001324 <HAL_GPIO_WritePin+0x60>)
 80012ea:	f7ff fa12 	bl	8000712 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80012ee:	787b      	ldrb	r3, [r7, #1]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_GPIO_WritePin+0x40>
 80012f4:	787b      	ldrb	r3, [r7, #1]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d004      	beq.n	8001304 <HAL_GPIO_WritePin+0x40>
 80012fa:	f44f 71cf 	mov.w	r1, #414	; 0x19e
 80012fe:	4809      	ldr	r0, [pc, #36]	; (8001324 <HAL_GPIO_WritePin+0x60>)
 8001300:	f7ff fa07 	bl	8000712 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001304:	787b      	ldrb	r3, [r7, #1]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001310:	e003      	b.n	800131a <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001312:	887b      	ldrh	r3, [r7, #2]
 8001314:	041a      	lsls	r2, r3, #16
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	619a      	str	r2, [r3, #24]
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	08002884 	.word	0x08002884

08001328 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b086      	sub	sp, #24
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d101      	bne.n	800133a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e316      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2b0f      	cmp	r3, #15
 8001340:	d903      	bls.n	800134a <HAL_RCC_OscConfig+0x22>
 8001342:	21e8      	movs	r1, #232	; 0xe8
 8001344:	48a3      	ldr	r0, [pc, #652]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001346:	f7ff f9e4 	bl	8000712 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	2b00      	cmp	r3, #0
 8001354:	f000 8088 	beq.w	8001468 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d00d      	beq.n	800137c <HAL_RCC_OscConfig+0x54>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001368:	d008      	beq.n	800137c <HAL_RCC_OscConfig+0x54>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001372:	d003      	beq.n	800137c <HAL_RCC_OscConfig+0x54>
 8001374:	21ed      	movs	r1, #237	; 0xed
 8001376:	4897      	ldr	r0, [pc, #604]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 8001378:	f7ff f9cb 	bl	8000712 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800137c:	4b96      	ldr	r3, [pc, #600]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 030c 	and.w	r3, r3, #12
 8001384:	2b04      	cmp	r3, #4
 8001386:	d00c      	beq.n	80013a2 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001388:	4b93      	ldr	r3, [pc, #588]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001390:	2b08      	cmp	r3, #8
 8001392:	d112      	bne.n	80013ba <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001394:	4b90      	ldr	r3, [pc, #576]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800139c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80013a0:	d10b      	bne.n	80013ba <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a2:	4b8d      	ldr	r3, [pc, #564]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d05b      	beq.n	8001466 <HAL_RCC_OscConfig+0x13e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d157      	bne.n	8001466 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e2d6      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c2:	d106      	bne.n	80013d2 <HAL_RCC_OscConfig+0xaa>
 80013c4:	4b84      	ldr	r3, [pc, #528]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a83      	ldr	r2, [pc, #524]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80013ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	e01d      	b.n	800140e <HAL_RCC_OscConfig+0xe6>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013da:	d10c      	bne.n	80013f6 <HAL_RCC_OscConfig+0xce>
 80013dc:	4b7e      	ldr	r3, [pc, #504]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a7d      	ldr	r2, [pc, #500]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80013e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b7b      	ldr	r3, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a7a      	ldr	r2, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80013ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013f2:	6013      	str	r3, [r2, #0]
 80013f4:	e00b      	b.n	800140e <HAL_RCC_OscConfig+0xe6>
 80013f6:	4b78      	ldr	r3, [pc, #480]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a77      	ldr	r2, [pc, #476]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80013fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001400:	6013      	str	r3, [r2, #0]
 8001402:	4b75      	ldr	r3, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a74      	ldr	r2, [pc, #464]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 8001408:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800140c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d013      	beq.n	800143e <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001416:	f7ff fb29 	bl	8000a6c <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800141e:	f7ff fb25 	bl	8000a6c <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b64      	cmp	r3, #100	; 0x64
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e29b      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001430:	4b69      	ldr	r3, [pc, #420]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0xf6>
 800143c:	e014      	b.n	8001468 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143e:	f7ff fb15 	bl	8000a6c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001444:	e008      	b.n	8001458 <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001446:	f7ff fb11 	bl	8000a6c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	2b64      	cmp	r3, #100	; 0x64
 8001452:	d901      	bls.n	8001458 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8001454:	2303      	movs	r3, #3
 8001456:	e287      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001458:	4b5f      	ldr	r3, [pc, #380]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d1f0      	bne.n	8001446 <HAL_RCC_OscConfig+0x11e>
 8001464:	e000      	b.n	8001468 <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001466:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d079      	beq.n	8001568 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <HAL_RCC_OscConfig+0x166>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	68db      	ldr	r3, [r3, #12]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d004      	beq.n	800148e <HAL_RCC_OscConfig+0x166>
 8001484:	f240 111f 	movw	r1, #287	; 0x11f
 8001488:	4852      	ldr	r0, [pc, #328]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800148a:	f7ff f942 	bl	8000712 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b1f      	cmp	r3, #31
 8001494:	d904      	bls.n	80014a0 <HAL_RCC_OscConfig+0x178>
 8001496:	f44f 7190 	mov.w	r1, #288	; 0x120
 800149a:	484e      	ldr	r0, [pc, #312]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800149c:	f7ff f939 	bl	8000712 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014a0:	4b4d      	ldr	r3, [pc, #308]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014ac:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014b4:	2b08      	cmp	r3, #8
 80014b6:	d11c      	bne.n	80014f2 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014b8:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d116      	bne.n	80014f2 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c4:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f003 0302 	and.w	r3, r3, #2
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d005      	beq.n	80014dc <HAL_RCC_OscConfig+0x1b4>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d001      	beq.n	80014dc <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e245      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014dc:	4b3e      	ldr	r3, [pc, #248]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	00db      	lsls	r3, r3, #3
 80014ea:	493b      	ldr	r1, [pc, #236]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80014ec:	4313      	orrs	r3, r2
 80014ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014f0:	e03a      	b.n	8001568 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d020      	beq.n	800153c <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014fa:	4b38      	ldr	r3, [pc, #224]	; (80015dc <HAL_RCC_OscConfig+0x2b4>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fab4 	bl	8000a6c <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff fab0 	bl	8000a6c <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e226      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	4b2f      	ldr	r3, [pc, #188]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	691b      	ldr	r3, [r3, #16]
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4928      	ldr	r1, [pc, #160]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
 800153a:	e015      	b.n	8001568 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800153c:	4b27      	ldr	r3, [pc, #156]	; (80015dc <HAL_RCC_OscConfig+0x2b4>)
 800153e:	2200      	movs	r2, #0
 8001540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001542:	f7ff fa93 	bl	8000a6c <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154a:	f7ff fa8f 	bl	8000a6c <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e205      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d046      	beq.n	8001602 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <HAL_RCC_OscConfig+0x266>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d004      	beq.n	800158e <HAL_RCC_OscConfig+0x266>
 8001584:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001588:	4812      	ldr	r0, [pc, #72]	; (80015d4 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	f7ff f8c2 	bl	8000712 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d016      	beq.n	80015c4 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 8001598:	2201      	movs	r2, #1
 800159a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800159c:	f7ff fa66 	bl	8000a6c <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015a4:	f7ff fa62 	bl	8000a6c <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b02      	cmp	r3, #2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1d8      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015b6:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <HAL_RCC_OscConfig+0x2b0>)
 80015b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x27c>
 80015c2:	e01e      	b.n	8001602 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <HAL_RCC_OscConfig+0x2b8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fa4f 	bl	8000a6c <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015d0:	e011      	b.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
 80015d2:	bf00      	nop
 80015d4:	080028c0 	.word	0x080028c0
 80015d8:	40023800 	.word	0x40023800
 80015dc:	42470000 	.word	0x42470000
 80015e0:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff fa42 	bl	8000a6c <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e1b8      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f6:	4b97      	ldr	r3, [pc, #604]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80015f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 80a8 	beq.w	8001760 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00c      	beq.n	8001636 <HAL_RCC_OscConfig+0x30e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	2b01      	cmp	r3, #1
 8001622:	d008      	beq.n	8001636 <HAL_RCC_OscConfig+0x30e>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b05      	cmp	r3, #5
 800162a:	d004      	beq.n	8001636 <HAL_RCC_OscConfig+0x30e>
 800162c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001630:	4889      	ldr	r0, [pc, #548]	; (8001858 <HAL_RCC_OscConfig+0x530>)
 8001632:	f7ff f86e 	bl	8000712 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001636:	4b87      	ldr	r3, [pc, #540]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d10f      	bne.n	8001662 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	4b83      	ldr	r3, [pc, #524]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	4a82      	ldr	r2, [pc, #520]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 800164c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001650:	6413      	str	r3, [r2, #64]	; 0x40
 8001652:	4b80      	ldr	r3, [pc, #512]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800165e:	2301      	movs	r3, #1
 8001660:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001662:	4b7e      	ldr	r3, [pc, #504]	; (800185c <HAL_RCC_OscConfig+0x534>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800166a:	2b00      	cmp	r3, #0
 800166c:	d118      	bne.n	80016a0 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800166e:	4b7b      	ldr	r3, [pc, #492]	; (800185c <HAL_RCC_OscConfig+0x534>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a7a      	ldr	r2, [pc, #488]	; (800185c <HAL_RCC_OscConfig+0x534>)
 8001674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001678:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800167a:	f7ff f9f7 	bl	8000a6c <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001682:	f7ff f9f3 	bl	8000a6c <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e169      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001694:	4b71      	ldr	r3, [pc, #452]	; (800185c <HAL_RCC_OscConfig+0x534>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f0      	beq.n	8001682 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x38e>
 80016a8:	4b6a      	ldr	r3, [pc, #424]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ac:	4a69      	ldr	r2, [pc, #420]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6713      	str	r3, [r2, #112]	; 0x70
 80016b4:	e01c      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c8>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	d10c      	bne.n	80016d8 <HAL_RCC_OscConfig+0x3b0>
 80016be:	4b65      	ldr	r3, [pc, #404]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016c2:	4a64      	ldr	r2, [pc, #400]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6713      	str	r3, [r2, #112]	; 0x70
 80016ca:	4b62      	ldr	r3, [pc, #392]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016ce:	4a61      	ldr	r2, [pc, #388]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6713      	str	r3, [r2, #112]	; 0x70
 80016d6:	e00b      	b.n	80016f0 <HAL_RCC_OscConfig+0x3c8>
 80016d8:	4b5e      	ldr	r3, [pc, #376]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016dc:	4a5d      	ldr	r2, [pc, #372]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016de:	f023 0301 	bic.w	r3, r3, #1
 80016e2:	6713      	str	r3, [r2, #112]	; 0x70
 80016e4:	4b5b      	ldr	r3, [pc, #364]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e8:	4a5a      	ldr	r2, [pc, #360]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 80016ea:	f023 0304 	bic.w	r3, r3, #4
 80016ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d015      	beq.n	8001724 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff f9b8 	bl	8000a6c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fe:	e00a      	b.n	8001716 <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001700:	f7ff f9b4 	bl	8000a6c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	f241 3288 	movw	r2, #5000	; 0x1388
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e128      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001716:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 8001718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0ee      	beq.n	8001700 <HAL_RCC_OscConfig+0x3d8>
 8001722:	e014      	b.n	800174e <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001724:	f7ff f9a2 	bl	8000a6c <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800172a:	e00a      	b.n	8001742 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800172c:	f7ff f99e 	bl	8000a6c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	f241 3288 	movw	r2, #5000	; 0x1388
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e112      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001742:	4b44      	ldr	r3, [pc, #272]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 8001744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1ee      	bne.n	800172c <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d105      	bne.n	8001760 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001754:	4b3f      	ldr	r3, [pc, #252]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	4a3e      	ldr	r2, [pc, #248]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 800175a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800175e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00c      	beq.n	8001782 <HAL_RCC_OscConfig+0x45a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d008      	beq.n	8001782 <HAL_RCC_OscConfig+0x45a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b02      	cmp	r3, #2
 8001776:	d004      	beq.n	8001782 <HAL_RCC_OscConfig+0x45a>
 8001778:	f240 11cf 	movw	r1, #463	; 0x1cf
 800177c:	4836      	ldr	r0, [pc, #216]	; (8001858 <HAL_RCC_OscConfig+0x530>)
 800177e:	f7fe ffc8 	bl	8000712 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80ed 	beq.w	8001966 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800178c:	4b31      	ldr	r3, [pc, #196]	; (8001854 <HAL_RCC_OscConfig+0x52c>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f003 030c 	and.w	r3, r3, #12
 8001794:	2b08      	cmp	r3, #8
 8001796:	f000 80ae 	beq.w	80018f6 <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	699b      	ldr	r3, [r3, #24]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	f040 8092 	bne.w	80018c8 <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	69db      	ldr	r3, [r3, #28]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d009      	beq.n	80017c0 <HAL_RCC_OscConfig+0x498>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80017b4:	d004      	beq.n	80017c0 <HAL_RCC_OscConfig+0x498>
 80017b6:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80017ba:	4827      	ldr	r0, [pc, #156]	; (8001858 <HAL_RCC_OscConfig+0x530>)
 80017bc:	f7fe ffa9 	bl	8000712 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	2b3f      	cmp	r3, #63	; 0x3f
 80017c6:	d904      	bls.n	80017d2 <HAL_RCC_OscConfig+0x4aa>
 80017c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80017cc:	4822      	ldr	r0, [pc, #136]	; (8001858 <HAL_RCC_OscConfig+0x530>)
 80017ce:	f7fe ffa0 	bl	8000712 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d6:	2b31      	cmp	r3, #49	; 0x31
 80017d8:	d904      	bls.n	80017e4 <HAL_RCC_OscConfig+0x4bc>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80017e2:	d904      	bls.n	80017ee <HAL_RCC_OscConfig+0x4c6>
 80017e4:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80017e8:	481b      	ldr	r0, [pc, #108]	; (8001858 <HAL_RCC_OscConfig+0x530>)
 80017ea:	f7fe ff92 	bl	8000712 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d010      	beq.n	8001818 <HAL_RCC_OscConfig+0x4f0>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d00c      	beq.n	8001818 <HAL_RCC_OscConfig+0x4f0>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001802:	2b06      	cmp	r3, #6
 8001804:	d008      	beq.n	8001818 <HAL_RCC_OscConfig+0x4f0>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180a:	2b08      	cmp	r3, #8
 800180c:	d004      	beq.n	8001818 <HAL_RCC_OscConfig+0x4f0>
 800180e:	f240 11db 	movw	r1, #475	; 0x1db
 8001812:	4811      	ldr	r0, [pc, #68]	; (8001858 <HAL_RCC_OscConfig+0x530>)
 8001814:	f7fe ff7d 	bl	8000712 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	2b01      	cmp	r3, #1
 800181e:	d903      	bls.n	8001828 <HAL_RCC_OscConfig+0x500>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d904      	bls.n	8001832 <HAL_RCC_OscConfig+0x50a>
 8001828:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800182c:	480a      	ldr	r0, [pc, #40]	; (8001858 <HAL_RCC_OscConfig+0x530>)
 800182e:	f7fe ff70 	bl	8000712 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001832:	4b0b      	ldr	r3, [pc, #44]	; (8001860 <HAL_RCC_OscConfig+0x538>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001838:	f7ff f918 	bl	8000a6c <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800183e:	e011      	b.n	8001864 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f914 	bl	8000a6c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d90a      	bls.n	8001864 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e08a      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800
 8001858:	080028c0 	.word	0x080028c0
 800185c:	40007000 	.word	0x40007000
 8001860:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001864:	4b42      	ldr	r3, [pc, #264]	; (8001970 <HAL_RCC_OscConfig+0x648>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1e7      	bne.n	8001840 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69da      	ldr	r2, [r3, #28]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	431a      	orrs	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187e:	019b      	lsls	r3, r3, #6
 8001880:	431a      	orrs	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001886:	085b      	lsrs	r3, r3, #1
 8001888:	3b01      	subs	r3, #1
 800188a:	041b      	lsls	r3, r3, #16
 800188c:	431a      	orrs	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	061b      	lsls	r3, r3, #24
 8001894:	4936      	ldr	r1, [pc, #216]	; (8001970 <HAL_RCC_OscConfig+0x648>)
 8001896:	4313      	orrs	r3, r2
 8001898:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800189a:	4b36      	ldr	r3, [pc, #216]	; (8001974 <HAL_RCC_OscConfig+0x64c>)
 800189c:	2201      	movs	r2, #1
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff f8e4 	bl	8000a6c <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff f8e0 	bl	8000a6c <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e056      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <HAL_RCC_OscConfig+0x648>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x580>
 80018c6:	e04e      	b.n	8001966 <HAL_RCC_OscConfig+0x63e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_RCC_OscConfig+0x64c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ce:	f7ff f8cd 	bl	8000a6c <HAL_GetTick>
 80018d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d4:	e008      	b.n	80018e8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d6:	f7ff f8c9 	bl	8000a6c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d901      	bls.n	80018e8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80018e4:	2303      	movs	r3, #3
 80018e6:	e03f      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e8:	4b21      	ldr	r3, [pc, #132]	; (8001970 <HAL_RCC_OscConfig+0x648>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d1f0      	bne.n	80018d6 <HAL_RCC_OscConfig+0x5ae>
 80018f4:	e037      	b.n	8001966 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d101      	bne.n	8001902 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e032      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001902:	4b1b      	ldr	r3, [pc, #108]	; (8001970 <HAL_RCC_OscConfig+0x648>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d028      	beq.n	8001962 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191a:	429a      	cmp	r2, r3
 800191c:	d121      	bne.n	8001962 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001928:	429a      	cmp	r2, r3
 800192a:	d11a      	bne.n	8001962 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001932:	4013      	ands	r3, r2
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001938:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800193a:	4293      	cmp	r3, r2
 800193c:	d111      	bne.n	8001962 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001948:	085b      	lsrs	r3, r3, #1
 800194a:	3b01      	subs	r3, #1
 800194c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800194e:	429a      	cmp	r2, r3
 8001950:	d107      	bne.n	8001962 <HAL_RCC_OscConfig+0x63a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800195e:	429a      	cmp	r2, r3
 8001960:	d001      	beq.n	8001966 <HAL_RCC_OscConfig+0x63e>
#endif
        {
          return HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_RCC_OscConfig+0x640>
        }
      }
    }
  }
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	42470060 	.word	0x42470060

08001978 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e174      	b.n	8001c76 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_RCC_ClockConfig+0x24>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2b0f      	cmp	r3, #15
 800199a:	d904      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x2e>
 800199c:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80019a0:	487b      	ldr	r0, [pc, #492]	; (8001b90 <HAL_RCC_ClockConfig+0x218>)
 80019a2:	f7fe feb6 	bl	8000712 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d019      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x68>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d016      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x68>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x68>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	d010      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x68>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d00d      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x68>
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	2b05      	cmp	r3, #5
 80019c8:	d00a      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x68>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b06      	cmp	r3, #6
 80019ce:	d007      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x68>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b07      	cmp	r3, #7
 80019d4:	d004      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x68>
 80019d6:	f240 215d 	movw	r1, #605	; 0x25d
 80019da:	486d      	ldr	r0, [pc, #436]	; (8001b90 <HAL_RCC_ClockConfig+0x218>)
 80019dc:	f7fe fe99 	bl	8000712 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4b6c      	ldr	r3, [pc, #432]	; (8001b94 <HAL_RCC_ClockConfig+0x21c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d90c      	bls.n	8001a08 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b69      	ldr	r3, [pc, #420]	; (8001b94 <HAL_RCC_ClockConfig+0x21c>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_RCC_ClockConfig+0x21c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e136      	b.n	8001c76 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d049      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0304 	and.w	r3, r3, #4
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a20:	4b5d      	ldr	r3, [pc, #372]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a5c      	ldr	r2, [pc, #368]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001a26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a38:	4b57      	ldr	r3, [pc, #348]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	4a56      	ldr	r2, [pc, #344]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001a3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d024      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x11e>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	2b80      	cmp	r3, #128	; 0x80
 8001a52:	d020      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x11e>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b90      	cmp	r3, #144	; 0x90
 8001a5a:	d01c      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x11e>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2ba0      	cmp	r3, #160	; 0xa0
 8001a62:	d018      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x11e>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2bb0      	cmp	r3, #176	; 0xb0
 8001a6a:	d014      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x11e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2bc0      	cmp	r3, #192	; 0xc0
 8001a72:	d010      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x11e>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2bd0      	cmp	r3, #208	; 0xd0
 8001a7a:	d00c      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x11e>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2be0      	cmp	r3, #224	; 0xe0
 8001a82:	d008      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x11e>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2bf0      	cmp	r3, #240	; 0xf0
 8001a8a:	d004      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x11e>
 8001a8c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8001a90:	483f      	ldr	r0, [pc, #252]	; (8001b90 <HAL_RCC_ClockConfig+0x218>)
 8001a92:	f7fe fe3e 	bl	8000712 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a96:	4b40      	ldr	r3, [pc, #256]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	493d      	ldr	r1, [pc, #244]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d059      	beq.n	8001b68 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x166>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d00c      	beq.n	8001ade <HAL_RCC_ClockConfig+0x166>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_ClockConfig+0x166>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	2b03      	cmp	r3, #3
 8001ad2:	d004      	beq.n	8001ade <HAL_RCC_ClockConfig+0x166>
 8001ad4:	f240 2187 	movw	r1, #647	; 0x287
 8001ad8:	482d      	ldr	r0, [pc, #180]	; (8001b90 <HAL_RCC_ClockConfig+0x218>)
 8001ada:	f7fe fe1a 	bl	8000712 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d107      	bne.n	8001af6 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d119      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0bf      	b.n	8001c76 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d003      	beq.n	8001b06 <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d107      	bne.n	8001b16 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0af      	b.n	8001c76 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b16:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e0a7      	b.n	8001c76 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b26:	4b1c      	ldr	r3, [pc, #112]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f023 0203 	bic.w	r2, r3, #3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4919      	ldr	r1, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001b34:	4313      	orrs	r3, r2
 8001b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b38:	f7fe ff98 	bl	8000a6c <HAL_GetTick>
 8001b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3e:	e00a      	b.n	8001b56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b40:	f7fe ff94 	bl	8000a6c <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e08f      	b.n	8001c76 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b56:	4b10      	ldr	r3, [pc, #64]	; (8001b98 <HAL_RCC_ClockConfig+0x220>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 020c 	and.w	r2, r3, #12
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d1eb      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <HAL_RCC_ClockConfig+0x21c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d212      	bcs.n	8001b9c <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RCC_ClockConfig+0x21c>)
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	b2d2      	uxtb	r2, r2
 8001b7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <HAL_RCC_ClockConfig+0x21c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 0307 	and.w	r3, r3, #7
 8001b86:	683a      	ldr	r2, [r7, #0]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d007      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e072      	b.n	8001c76 <HAL_RCC_ClockConfig+0x2fe>
 8001b90:	080028c0 	.word	0x080028c0
 8001b94:	40023c00 	.word	0x40023c00
 8001b98:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0304 	and.w	r3, r3, #4
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d025      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d018      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x26a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001bb8:	d013      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x26a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001bc2:	d00e      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x26a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001bcc:	d009      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x26a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001bd6:	d004      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x26a>
 8001bd8:	f240 21c5 	movw	r1, #709	; 0x2c5
 8001bdc:	4828      	ldr	r0, [pc, #160]	; (8001c80 <HAL_RCC_ClockConfig+0x308>)
 8001bde:	f7fe fd98 	bl	8000712 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001be2:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <HAL_RCC_ClockConfig+0x30c>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	4925      	ldr	r1, [pc, #148]	; (8001c84 <HAL_RCC_ClockConfig+0x30c>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0308 	and.w	r3, r3, #8
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d026      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d018      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x2c2>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c10:	d013      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x2c2>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001c1a:	d00e      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x2c2>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001c24:	d009      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x2c2>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	691b      	ldr	r3, [r3, #16]
 8001c2a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8001c2e:	d004      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x2c2>
 8001c30:	f44f 7133 	mov.w	r1, #716	; 0x2cc
 8001c34:	4812      	ldr	r0, [pc, #72]	; (8001c80 <HAL_RCC_ClockConfig+0x308>)
 8001c36:	f7fe fd6c 	bl	8000712 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c3a:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_RCC_ClockConfig+0x30c>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	490e      	ldr	r1, [pc, #56]	; (8001c84 <HAL_RCC_ClockConfig+0x30c>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c4e:	f000 f821 	bl	8001c94 <HAL_RCC_GetSysClockFreq>
 8001c52:	4602      	mov	r2, r0
 8001c54:	4b0b      	ldr	r3, [pc, #44]	; (8001c84 <HAL_RCC_ClockConfig+0x30c>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	091b      	lsrs	r3, r3, #4
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	490a      	ldr	r1, [pc, #40]	; (8001c88 <HAL_RCC_ClockConfig+0x310>)
 8001c60:	5ccb      	ldrb	r3, [r1, r3]
 8001c62:	fa22 f303 	lsr.w	r3, r2, r3
 8001c66:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_RCC_ClockConfig+0x314>)
 8001c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_RCC_ClockConfig+0x318>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe feb8 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	080028c0 	.word	0x080028c0
 8001c84:	40023800 	.word	0x40023800
 8001c88:	08002934 	.word	0x08002934
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000004 	.word	0x20000004

08001c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c98:	b084      	sub	sp, #16
 8001c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cac:	4b67      	ldr	r3, [pc, #412]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 030c 	and.w	r3, r3, #12
 8001cb4:	2b08      	cmp	r3, #8
 8001cb6:	d00d      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	f200 80bd 	bhi.w	8001e38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x3a>
 8001cc6:	e0b7      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cc8:	4b61      	ldr	r3, [pc, #388]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001cca:	60bb      	str	r3, [r7, #8]
       break;
 8001ccc:	e0b7      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001cce:	4b61      	ldr	r3, [pc, #388]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001cd0:	60bb      	str	r3, [r7, #8]
      break;
 8001cd2:	e0b4      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cd4:	4b5d      	ldr	r3, [pc, #372]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cde:	4b5b      	ldr	r3, [pc, #364]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d04d      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cea:	4b58      	ldr	r3, [pc, #352]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f04f 0300 	mov.w	r3, #0
 8001cf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	ea02 0800 	and.w	r8, r2, r0
 8001d02:	ea03 0901 	and.w	r9, r3, r1
 8001d06:	4640      	mov	r0, r8
 8001d08:	4649      	mov	r1, r9
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	014b      	lsls	r3, r1, #5
 8001d14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d18:	0142      	lsls	r2, r0, #5
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	ebb0 0008 	subs.w	r0, r0, r8
 8001d22:	eb61 0109 	sbc.w	r1, r1, r9
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	018b      	lsls	r3, r1, #6
 8001d30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d34:	0182      	lsls	r2, r0, #6
 8001d36:	1a12      	subs	r2, r2, r0
 8001d38:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3c:	f04f 0000 	mov.w	r0, #0
 8001d40:	f04f 0100 	mov.w	r1, #0
 8001d44:	00d9      	lsls	r1, r3, #3
 8001d46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d4a:	00d0      	lsls	r0, r2, #3
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	460b      	mov	r3, r1
 8001d50:	eb12 0208 	adds.w	r2, r2, r8
 8001d54:	eb43 0309 	adc.w	r3, r3, r9
 8001d58:	f04f 0000 	mov.w	r0, #0
 8001d5c:	f04f 0100 	mov.w	r1, #0
 8001d60:	0259      	lsls	r1, r3, #9
 8001d62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001d66:	0250      	lsls	r0, r2, #9
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	461a      	mov	r2, r3
 8001d74:	f04f 0300 	mov.w	r3, #0
 8001d78:	f7fe fa26 	bl	80001c8 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	e04a      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	099b      	lsrs	r3, r3, #6
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	f04f 0300 	mov.w	r3, #0
 8001d92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001d96:	f04f 0100 	mov.w	r1, #0
 8001d9a:	ea02 0400 	and.w	r4, r2, r0
 8001d9e:	ea03 0501 	and.w	r5, r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	014b      	lsls	r3, r1, #5
 8001db0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001db4:	0142      	lsls	r2, r0, #5
 8001db6:	4610      	mov	r0, r2
 8001db8:	4619      	mov	r1, r3
 8001dba:	1b00      	subs	r0, r0, r4
 8001dbc:	eb61 0105 	sbc.w	r1, r1, r5
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	f04f 0300 	mov.w	r3, #0
 8001dc8:	018b      	lsls	r3, r1, #6
 8001dca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001dce:	0182      	lsls	r2, r0, #6
 8001dd0:	1a12      	subs	r2, r2, r0
 8001dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd6:	f04f 0000 	mov.w	r0, #0
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	00d9      	lsls	r1, r3, #3
 8001de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001de4:	00d0      	lsls	r0, r2, #3
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	1912      	adds	r2, r2, r4
 8001dec:	eb45 0303 	adc.w	r3, r5, r3
 8001df0:	f04f 0000 	mov.w	r0, #0
 8001df4:	f04f 0100 	mov.w	r1, #0
 8001df8:	0299      	lsls	r1, r3, #10
 8001dfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001dfe:	0290      	lsls	r0, r2, #10
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	4610      	mov	r0, r2
 8001e06:	4619      	mov	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	f7fe f9da 	bl	80001c8 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	60bb      	str	r3, [r7, #8]
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001e3a:	60bb      	str	r3, [r7, #8]
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3710      	adds	r7, #16
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000000 	.word	0x20000000

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a9b      	lsrs	r3, r3, #10
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	08002944 	.word	0x08002944

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffdc 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0b5b      	lsrs	r3, r3, #13
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	08002944 	.word	0x08002944

08001ec0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e0b4      	b.n	800203c <HAL_UART_Init+0x17c>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d031      	beq.n	8001f3e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a59      	ldr	r2, [pc, #356]	; (8002044 <HAL_UART_Init+0x184>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d013      	beq.n	8001f0c <HAL_UART_Init+0x4c>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a57      	ldr	r2, [pc, #348]	; (8002048 <HAL_UART_Init+0x188>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d00e      	beq.n	8001f0c <HAL_UART_Init+0x4c>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a56      	ldr	r2, [pc, #344]	; (800204c <HAL_UART_Init+0x18c>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d009      	beq.n	8001f0c <HAL_UART_Init+0x4c>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a54      	ldr	r2, [pc, #336]	; (8002050 <HAL_UART_Init+0x190>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d004      	beq.n	8001f0c <HAL_UART_Init+0x4c>
 8001f02:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8001f06:	4853      	ldr	r0, [pc, #332]	; (8002054 <HAL_UART_Init+0x194>)
 8001f08:	f7fe fc03 	bl	8000712 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d037      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1c:	d032      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	699b      	ldr	r3, [r3, #24]
 8001f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f26:	d02d      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001f30:	d028      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f32:	f240 1173 	movw	r1, #371	; 0x173
 8001f36:	4847      	ldr	r0, [pc, #284]	; (8002054 <HAL_UART_Init+0x194>)
 8001f38:	f7fe fbeb 	bl	8000712 <assert_failed>
 8001f3c:	e022      	b.n	8001f84 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a40      	ldr	r2, [pc, #256]	; (8002044 <HAL_UART_Init+0x184>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d01d      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a3e      	ldr	r2, [pc, #248]	; (8002048 <HAL_UART_Init+0x188>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d018      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a3d      	ldr	r2, [pc, #244]	; (800204c <HAL_UART_Init+0x18c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d013      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a3d      	ldr	r2, [pc, #244]	; (8002058 <HAL_UART_Init+0x198>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d00e      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a3c      	ldr	r2, [pc, #240]	; (800205c <HAL_UART_Init+0x19c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d009      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a36      	ldr	r2, [pc, #216]	; (8002050 <HAL_UART_Init+0x190>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d004      	beq.n	8001f84 <HAL_UART_Init+0xc4>
 8001f7a:	f240 1177 	movw	r1, #375	; 0x177
 8001f7e:	4835      	ldr	r0, [pc, #212]	; (8002054 <HAL_UART_Init+0x194>)
 8001f80:	f7fe fbc7 	bl	8000712 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <HAL_UART_Init+0xe0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f94:	d004      	beq.n	8001fa0 <HAL_UART_Init+0xe0>
 8001f96:	f240 1179 	movw	r1, #377	; 0x179
 8001f9a:	482e      	ldr	r0, [pc, #184]	; (8002054 <HAL_UART_Init+0x194>)
 8001f9c:	f7fe fbb9 	bl	8000712 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69db      	ldr	r3, [r3, #28]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HAL_UART_Init+0xfc>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fb0:	d004      	beq.n	8001fbc <HAL_UART_Init+0xfc>
 8001fb2:	f44f 71bd 	mov.w	r1, #378	; 0x17a
 8001fb6:	4827      	ldr	r0, [pc, #156]	; (8002054 <HAL_UART_Init+0x194>)
 8001fb8:	f7fe fbab 	bl	8000712 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d106      	bne.n	8001fd6 <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7fe fc6b 	bl	80008ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2224      	movs	r2, #36	; 0x24
 8001fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f9d8 	bl	80023a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	691a      	ldr	r2, [r3, #16]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002002:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002012:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002022:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2220      	movs	r2, #32
 800202e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2220      	movs	r2, #32
 8002036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3708      	adds	r7, #8
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40011000 	.word	0x40011000
 8002048:	40004400 	.word	0x40004400
 800204c:	40004800 	.word	0x40004800
 8002050:	40011400 	.word	0x40011400
 8002054:	080028f8 	.word	0x080028f8
 8002058:	40004c00 	.word	0x40004c00
 800205c:	40005000 	.word	0x40005000

08002060 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af02      	add	r7, sp, #8
 8002066:	60f8      	str	r0, [r7, #12]
 8002068:	60b9      	str	r1, [r7, #8]
 800206a:	603b      	str	r3, [r7, #0]
 800206c:	4613      	mov	r3, r2
 800206e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207a:	b2db      	uxtb	r3, r3
 800207c:	2b20      	cmp	r3, #32
 800207e:	d17c      	bne.n	800217a <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <HAL_UART_Transmit+0x2c>
 8002086:	88fb      	ldrh	r3, [r7, #6]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e075      	b.n	800217c <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_UART_Transmit+0x3e>
 800209a:	2302      	movs	r3, #2
 800209c:	e06e      	b.n	800217c <HAL_UART_Transmit+0x11c>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2221      	movs	r2, #33	; 0x21
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020b4:	f7fe fcda 	bl	8000a6c <HAL_GetTick>
 80020b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	88fa      	ldrh	r2, [r7, #6]
 80020be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	88fa      	ldrh	r2, [r7, #6]
 80020c4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ce:	d108      	bne.n	80020e2 <HAL_UART_Transmit+0x82>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d104      	bne.n	80020e2 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	e003      	b.n	80020ea <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020f2:	e02a      	b.n	800214a <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	9300      	str	r3, [sp, #0]
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	2200      	movs	r2, #0
 80020fc:	2180      	movs	r1, #128	; 0x80
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f8e2 	bl	80022c8 <UART_WaitOnFlagUntilTimeout>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e036      	b.n	800217c <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10b      	bne.n	800212c <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	881b      	ldrh	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002122:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	3302      	adds	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
 800212a:	e007      	b.n	800213c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	781a      	ldrb	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	3301      	adds	r3, #1
 800213a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002140:	b29b      	uxth	r3, r3
 8002142:	3b01      	subs	r3, #1
 8002144:	b29a      	uxth	r2, r3
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1cf      	bne.n	80020f4 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	2200      	movs	r2, #0
 800215c:	2140      	movs	r1, #64	; 0x40
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 f8b2 	bl	80022c8 <UART_WaitOnFlagUntilTimeout>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e006      	b.n	800217c <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2220      	movs	r2, #32
 8002172:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e000      	b.n	800217c <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800217a:	2302      	movs	r3, #2
  }
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	; 0x28
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	f040 808c 	bne.w	80022be <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d002      	beq.n	80021b2 <HAL_UART_Receive+0x2e>
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e084      	b.n	80022c0 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_UART_Receive+0x40>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e07d      	b.n	80022c0 <HAL_UART_Receive+0x13c>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2222      	movs	r2, #34	; 0x22
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021e0:	f7fe fc44 	bl	8000a6c <HAL_GetTick>
 80021e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	88fa      	ldrh	r2, [r7, #6]
 80021ea:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	88fa      	ldrh	r2, [r7, #6]
 80021f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fa:	d108      	bne.n	800220e <HAL_UART_Receive+0x8a>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	691b      	ldr	r3, [r3, #16]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d104      	bne.n	800220e <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	61bb      	str	r3, [r7, #24]
 800220c:	e003      	b.n	8002216 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002212:	2300      	movs	r3, #0
 8002214:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800221e:	e043      	b.n	80022a8 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	2200      	movs	r2, #0
 8002228:	2120      	movs	r1, #32
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 f84c 	bl	80022c8 <UART_WaitOnFlagUntilTimeout>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e042      	b.n	80022c0 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10c      	bne.n	800225a <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	b29b      	uxth	r3, r3
 8002248:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224c:	b29a      	uxth	r2, r3
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	3302      	adds	r3, #2
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	e01f      	b.n	800229a <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002262:	d007      	beq.n	8002274 <HAL_UART_Receive+0xf0>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <HAL_UART_Receive+0xfe>
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	701a      	strb	r2, [r3, #0]
 8002280:	e008      	b.n	8002294 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228e:	b2da      	uxtb	r2, r3
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3301      	adds	r3, #1
 8002298:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d1b6      	bne.n	8002220 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2220      	movs	r2, #32
 80022b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022ba:	2300      	movs	r3, #0
 80022bc:	e000      	b.n	80022c0 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022be:	2302      	movs	r3, #2
  }
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3720      	adds	r7, #32
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b090      	sub	sp, #64	; 0x40
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	4613      	mov	r3, r2
 80022d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022d8:	e050      	b.n	800237c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e0:	d04c      	beq.n	800237c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80022e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d007      	beq.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80022e8:	f7fe fbc0 	bl	8000a6c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d241      	bcs.n	800237c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	330c      	adds	r3, #12
 80022fe:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002302:	e853 3f00 	ldrex	r3, [r3]
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800230e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002318:	637a      	str	r2, [r7, #52]	; 0x34
 800231a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800231c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800231e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002320:	e841 2300 	strex	r3, r2, [r1]
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e5      	bne.n	80022f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	3314      	adds	r3, #20
 8002332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	e853 3f00 	ldrex	r3, [r3]
 800233a:	613b      	str	r3, [r7, #16]
   return(result);
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	63bb      	str	r3, [r7, #56]	; 0x38
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	3314      	adds	r3, #20
 800234a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800234c:	623a      	str	r2, [r7, #32]
 800234e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002350:	69f9      	ldr	r1, [r7, #28]
 8002352:	6a3a      	ldr	r2, [r7, #32]
 8002354:	e841 2300 	strex	r3, r2, [r1]
 8002358:	61bb      	str	r3, [r7, #24]
   return(result);
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e5      	bne.n	800232c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2220      	movs	r2, #32
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e00f      	b.n	800239c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	4013      	ands	r3, r2
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	429a      	cmp	r2, r3
 800238a:	bf0c      	ite	eq
 800238c:	2301      	moveq	r3, #1
 800238e:	2300      	movne	r3, #0
 8002390:	b2db      	uxtb	r3, r3
 8002392:	461a      	mov	r2, r3
 8002394:	79fb      	ldrb	r3, [r7, #7]
 8002396:	429a      	cmp	r2, r3
 8002398:	d09f      	beq.n	80022da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3740      	adds	r7, #64	; 0x40
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023a8:	b09f      	sub	sp, #124	; 0x7c
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	66f8      	str	r0, [r7, #108]	; 0x6c
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80023ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023b0:	685a      	ldr	r2, [r3, #4]
 80023b2:	4b9b      	ldr	r3, [pc, #620]	; (8002620 <UART_SetConfig+0x27c>)
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d904      	bls.n	80023c2 <UART_SetConfig+0x1e>
 80023b8:	f640 6156 	movw	r1, #3670	; 0xe56
 80023bc:	4899      	ldr	r0, [pc, #612]	; (8002624 <UART_SetConfig+0x280>)
 80023be:	f7fe f9a8 	bl	8000712 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80023c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d009      	beq.n	80023de <UART_SetConfig+0x3a>
 80023ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d2:	d004      	beq.n	80023de <UART_SetConfig+0x3a>
 80023d4:	f640 6157 	movw	r1, #3671	; 0xe57
 80023d8:	4892      	ldr	r0, [pc, #584]	; (8002624 <UART_SetConfig+0x280>)
 80023da:	f7fe f99a 	bl	8000712 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80023de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00e      	beq.n	8002404 <UART_SetConfig+0x60>
 80023e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ee:	d009      	beq.n	8002404 <UART_SetConfig+0x60>
 80023f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023f8:	d004      	beq.n	8002404 <UART_SetConfig+0x60>
 80023fa:	f640 6158 	movw	r1, #3672	; 0xe58
 80023fe:	4889      	ldr	r0, [pc, #548]	; (8002624 <UART_SetConfig+0x280>)
 8002400:	f7fe f987 	bl	8000712 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002404:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800240c:	4013      	ands	r3, r2
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <UART_SetConfig+0x76>
 8002412:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002414:	695b      	ldr	r3, [r3, #20]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d104      	bne.n	8002424 <UART_SetConfig+0x80>
 800241a:	f640 6159 	movw	r1, #3673	; 0xe59
 800241e:	4881      	ldr	r0, [pc, #516]	; (8002624 <UART_SetConfig+0x280>)
 8002420:	f7fe f977 	bl	8000712 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800242e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002430:	68d9      	ldr	r1, [r3, #12]
 8002432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	ea40 0301 	orr.w	r3, r0, r1
 800243a:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800243c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	431a      	orrs	r2, r3
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	431a      	orrs	r2, r3
 800244c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800244e:	69db      	ldr	r3, [r3, #28]
 8002450:	4313      	orrs	r3, r2
 8002452:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8002454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800245e:	f021 010c 	bic.w	r1, r1, #12
 8002462:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002468:	430b      	orrs	r3, r1
 800246a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800246c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002478:	6999      	ldr	r1, [r3, #24]
 800247a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	ea40 0301 	orr.w	r3, r0, r1
 8002482:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4b67      	ldr	r3, [pc, #412]	; (8002628 <UART_SetConfig+0x284>)
 800248a:	429a      	cmp	r2, r3
 800248c:	d004      	beq.n	8002498 <UART_SetConfig+0xf4>
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b66      	ldr	r3, [pc, #408]	; (800262c <UART_SetConfig+0x288>)
 8002494:	429a      	cmp	r2, r3
 8002496:	d103      	bne.n	80024a0 <UART_SetConfig+0xfc>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002498:	f7ff fcfe 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 800249c:	6778      	str	r0, [r7, #116]	; 0x74
 800249e:	e002      	b.n	80024a6 <UART_SetConfig+0x102>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80024a0:	f7ff fce6 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 80024a4:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024a8:	69db      	ldr	r3, [r3, #28]
 80024aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ae:	f040 80c1 	bne.w	8002634 <UART_SetConfig+0x290>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80024b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b4:	461c      	mov	r4, r3
 80024b6:	f04f 0500 	mov.w	r5, #0
 80024ba:	4622      	mov	r2, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	1891      	adds	r1, r2, r2
 80024c0:	6439      	str	r1, [r7, #64]	; 0x40
 80024c2:	415b      	adcs	r3, r3
 80024c4:	647b      	str	r3, [r7, #68]	; 0x44
 80024c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80024ca:	1912      	adds	r2, r2, r4
 80024cc:	eb45 0303 	adc.w	r3, r5, r3
 80024d0:	f04f 0000 	mov.w	r0, #0
 80024d4:	f04f 0100 	mov.w	r1, #0
 80024d8:	00d9      	lsls	r1, r3, #3
 80024da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024de:	00d0      	lsls	r0, r2, #3
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	1911      	adds	r1, r2, r4
 80024e6:	6639      	str	r1, [r7, #96]	; 0x60
 80024e8:	416b      	adcs	r3, r5
 80024ea:	667b      	str	r3, [r7, #100]	; 0x64
 80024ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	461a      	mov	r2, r3
 80024f2:	f04f 0300 	mov.w	r3, #0
 80024f6:	1891      	adds	r1, r2, r2
 80024f8:	63b9      	str	r1, [r7, #56]	; 0x38
 80024fa:	415b      	adcs	r3, r3
 80024fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002502:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8002506:	f7fd fe5f 	bl	80001c8 <__aeabi_uldivmod>
 800250a:	4602      	mov	r2, r0
 800250c:	460b      	mov	r3, r1
 800250e:	4b48      	ldr	r3, [pc, #288]	; (8002630 <UART_SetConfig+0x28c>)
 8002510:	fba3 2302 	umull	r2, r3, r3, r2
 8002514:	095b      	lsrs	r3, r3, #5
 8002516:	011e      	lsls	r6, r3, #4
 8002518:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800251a:	461c      	mov	r4, r3
 800251c:	f04f 0500 	mov.w	r5, #0
 8002520:	4622      	mov	r2, r4
 8002522:	462b      	mov	r3, r5
 8002524:	1891      	adds	r1, r2, r2
 8002526:	6339      	str	r1, [r7, #48]	; 0x30
 8002528:	415b      	adcs	r3, r3
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
 800252c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002530:	1912      	adds	r2, r2, r4
 8002532:	eb45 0303 	adc.w	r3, r5, r3
 8002536:	f04f 0000 	mov.w	r0, #0
 800253a:	f04f 0100 	mov.w	r1, #0
 800253e:	00d9      	lsls	r1, r3, #3
 8002540:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002544:	00d0      	lsls	r0, r2, #3
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	1911      	adds	r1, r2, r4
 800254c:	65b9      	str	r1, [r7, #88]	; 0x58
 800254e:	416b      	adcs	r3, r5
 8002550:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	461a      	mov	r2, r3
 8002558:	f04f 0300 	mov.w	r3, #0
 800255c:	1891      	adds	r1, r2, r2
 800255e:	62b9      	str	r1, [r7, #40]	; 0x28
 8002560:	415b      	adcs	r3, r3
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002564:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002568:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800256c:	f7fd fe2c 	bl	80001c8 <__aeabi_uldivmod>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <UART_SetConfig+0x28c>)
 8002576:	fba3 1302 	umull	r1, r3, r3, r2
 800257a:	095b      	lsrs	r3, r3, #5
 800257c:	2164      	movs	r1, #100	; 0x64
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	00db      	lsls	r3, r3, #3
 8002586:	3332      	adds	r3, #50	; 0x32
 8002588:	4a29      	ldr	r2, [pc, #164]	; (8002630 <UART_SetConfig+0x28c>)
 800258a:	fba2 2303 	umull	r2, r3, r2, r3
 800258e:	095b      	lsrs	r3, r3, #5
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002596:	441e      	add	r6, r3
 8002598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800259a:	4618      	mov	r0, r3
 800259c:	f04f 0100 	mov.w	r1, #0
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	1894      	adds	r4, r2, r2
 80025a6:	623c      	str	r4, [r7, #32]
 80025a8:	415b      	adcs	r3, r3
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
 80025ac:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80025b0:	1812      	adds	r2, r2, r0
 80025b2:	eb41 0303 	adc.w	r3, r1, r3
 80025b6:	f04f 0400 	mov.w	r4, #0
 80025ba:	f04f 0500 	mov.w	r5, #0
 80025be:	00dd      	lsls	r5, r3, #3
 80025c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80025c4:	00d4      	lsls	r4, r2, #3
 80025c6:	4622      	mov	r2, r4
 80025c8:	462b      	mov	r3, r5
 80025ca:	1814      	adds	r4, r2, r0
 80025cc:	653c      	str	r4, [r7, #80]	; 0x50
 80025ce:	414b      	adcs	r3, r1
 80025d0:	657b      	str	r3, [r7, #84]	; 0x54
 80025d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	461a      	mov	r2, r3
 80025d8:	f04f 0300 	mov.w	r3, #0
 80025dc:	1891      	adds	r1, r2, r2
 80025de:	61b9      	str	r1, [r7, #24]
 80025e0:	415b      	adcs	r3, r3
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025e8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80025ec:	f7fd fdec 	bl	80001c8 <__aeabi_uldivmod>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4b0e      	ldr	r3, [pc, #56]	; (8002630 <UART_SetConfig+0x28c>)
 80025f6:	fba3 1302 	umull	r1, r3, r3, r2
 80025fa:	095b      	lsrs	r3, r3, #5
 80025fc:	2164      	movs	r1, #100	; 0x64
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	3332      	adds	r3, #50	; 0x32
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <UART_SetConfig+0x28c>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	095b      	lsrs	r3, r3, #5
 8002610:	f003 0207 	and.w	r2, r3, #7
 8002614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4432      	add	r2, r6
 800261a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800261c:	e0c4      	b.n	80027a8 <UART_SetConfig+0x404>
 800261e:	bf00      	nop
 8002620:	00a037a0 	.word	0x00a037a0
 8002624:	080028f8 	.word	0x080028f8
 8002628:	40011000 	.word	0x40011000
 800262c:	40011400 	.word	0x40011400
 8002630:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002636:	461c      	mov	r4, r3
 8002638:	f04f 0500 	mov.w	r5, #0
 800263c:	4622      	mov	r2, r4
 800263e:	462b      	mov	r3, r5
 8002640:	1891      	adds	r1, r2, r2
 8002642:	6139      	str	r1, [r7, #16]
 8002644:	415b      	adcs	r3, r3
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800264c:	1912      	adds	r2, r2, r4
 800264e:	eb45 0303 	adc.w	r3, r5, r3
 8002652:	f04f 0000 	mov.w	r0, #0
 8002656:	f04f 0100 	mov.w	r1, #0
 800265a:	00d9      	lsls	r1, r3, #3
 800265c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002660:	00d0      	lsls	r0, r2, #3
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	eb12 0804 	adds.w	r8, r2, r4
 800266a:	eb43 0905 	adc.w	r9, r3, r5
 800266e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	f04f 0100 	mov.w	r1, #0
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	008b      	lsls	r3, r1, #2
 8002682:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002686:	0082      	lsls	r2, r0, #2
 8002688:	4640      	mov	r0, r8
 800268a:	4649      	mov	r1, r9
 800268c:	f7fd fd9c 	bl	80001c8 <__aeabi_uldivmod>
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4b47      	ldr	r3, [pc, #284]	; (80027b4 <UART_SetConfig+0x410>)
 8002696:	fba3 2302 	umull	r2, r3, r3, r2
 800269a:	095b      	lsrs	r3, r3, #5
 800269c:	011e      	lsls	r6, r3, #4
 800269e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a0:	4618      	mov	r0, r3
 80026a2:	f04f 0100 	mov.w	r1, #0
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	1894      	adds	r4, r2, r2
 80026ac:	60bc      	str	r4, [r7, #8]
 80026ae:	415b      	adcs	r3, r3
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026b6:	1812      	adds	r2, r2, r0
 80026b8:	eb41 0303 	adc.w	r3, r1, r3
 80026bc:	f04f 0400 	mov.w	r4, #0
 80026c0:	f04f 0500 	mov.w	r5, #0
 80026c4:	00dd      	lsls	r5, r3, #3
 80026c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80026ca:	00d4      	lsls	r4, r2, #3
 80026cc:	4622      	mov	r2, r4
 80026ce:	462b      	mov	r3, r5
 80026d0:	1814      	adds	r4, r2, r0
 80026d2:	64bc      	str	r4, [r7, #72]	; 0x48
 80026d4:	414b      	adcs	r3, r1
 80026d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80026d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4618      	mov	r0, r3
 80026de:	f04f 0100 	mov.w	r1, #0
 80026e2:	f04f 0200 	mov.w	r2, #0
 80026e6:	f04f 0300 	mov.w	r3, #0
 80026ea:	008b      	lsls	r3, r1, #2
 80026ec:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80026f0:	0082      	lsls	r2, r0, #2
 80026f2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80026f6:	f7fd fd67 	bl	80001c8 <__aeabi_uldivmod>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <UART_SetConfig+0x410>)
 8002700:	fba3 1302 	umull	r1, r3, r3, r2
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	2164      	movs	r1, #100	; 0x64
 8002708:	fb01 f303 	mul.w	r3, r1, r3
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	3332      	adds	r3, #50	; 0x32
 8002712:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <UART_SetConfig+0x410>)
 8002714:	fba2 2303 	umull	r2, r3, r2, r3
 8002718:	095b      	lsrs	r3, r3, #5
 800271a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800271e:	441e      	add	r6, r3
 8002720:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002722:	4618      	mov	r0, r3
 8002724:	f04f 0100 	mov.w	r1, #0
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	1894      	adds	r4, r2, r2
 800272e:	603c      	str	r4, [r7, #0]
 8002730:	415b      	adcs	r3, r3
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002738:	1812      	adds	r2, r2, r0
 800273a:	eb41 0303 	adc.w	r3, r1, r3
 800273e:	f04f 0400 	mov.w	r4, #0
 8002742:	f04f 0500 	mov.w	r5, #0
 8002746:	00dd      	lsls	r5, r3, #3
 8002748:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800274c:	00d4      	lsls	r4, r2, #3
 800274e:	4622      	mov	r2, r4
 8002750:	462b      	mov	r3, r5
 8002752:	eb12 0a00 	adds.w	sl, r2, r0
 8002756:	eb43 0b01 	adc.w	fp, r3, r1
 800275a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	4618      	mov	r0, r3
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	008b      	lsls	r3, r1, #2
 800276e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002772:	0082      	lsls	r2, r0, #2
 8002774:	4650      	mov	r0, sl
 8002776:	4659      	mov	r1, fp
 8002778:	f7fd fd26 	bl	80001c8 <__aeabi_uldivmod>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <UART_SetConfig+0x410>)
 8002782:	fba3 1302 	umull	r1, r3, r3, r2
 8002786:	095b      	lsrs	r3, r3, #5
 8002788:	2164      	movs	r1, #100	; 0x64
 800278a:	fb01 f303 	mul.w	r3, r1, r3
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	3332      	adds	r3, #50	; 0x32
 8002794:	4a07      	ldr	r2, [pc, #28]	; (80027b4 <UART_SetConfig+0x410>)
 8002796:	fba2 2303 	umull	r2, r3, r2, r3
 800279a:	095b      	lsrs	r3, r3, #5
 800279c:	f003 020f 	and.w	r2, r3, #15
 80027a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4432      	add	r2, r6
 80027a6:	609a      	str	r2, [r3, #8]
}
 80027a8:	bf00      	nop
 80027aa:	377c      	adds	r7, #124	; 0x7c
 80027ac:	46bd      	mov	sp, r7
 80027ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027b2:	bf00      	nop
 80027b4:	51eb851f 	.word	0x51eb851f

080027b8 <__libc_init_array>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	4d0d      	ldr	r5, [pc, #52]	; (80027f0 <__libc_init_array+0x38>)
 80027bc:	4c0d      	ldr	r4, [pc, #52]	; (80027f4 <__libc_init_array+0x3c>)
 80027be:	1b64      	subs	r4, r4, r5
 80027c0:	10a4      	asrs	r4, r4, #2
 80027c2:	2600      	movs	r6, #0
 80027c4:	42a6      	cmp	r6, r4
 80027c6:	d109      	bne.n	80027dc <__libc_init_array+0x24>
 80027c8:	4d0b      	ldr	r5, [pc, #44]	; (80027f8 <__libc_init_array+0x40>)
 80027ca:	4c0c      	ldr	r4, [pc, #48]	; (80027fc <__libc_init_array+0x44>)
 80027cc:	f000 f820 	bl	8002810 <_init>
 80027d0:	1b64      	subs	r4, r4, r5
 80027d2:	10a4      	asrs	r4, r4, #2
 80027d4:	2600      	movs	r6, #0
 80027d6:	42a6      	cmp	r6, r4
 80027d8:	d105      	bne.n	80027e6 <__libc_init_array+0x2e>
 80027da:	bd70      	pop	{r4, r5, r6, pc}
 80027dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027e0:	4798      	blx	r3
 80027e2:	3601      	adds	r6, #1
 80027e4:	e7ee      	b.n	80027c4 <__libc_init_array+0xc>
 80027e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027ea:	4798      	blx	r3
 80027ec:	3601      	adds	r6, #1
 80027ee:	e7f2      	b.n	80027d6 <__libc_init_array+0x1e>
 80027f0:	08002954 	.word	0x08002954
 80027f4:	08002954 	.word	0x08002954
 80027f8:	08002954 	.word	0x08002954
 80027fc:	08002958 	.word	0x08002958

08002800 <memset>:
 8002800:	4402      	add	r2, r0
 8002802:	4603      	mov	r3, r0
 8002804:	4293      	cmp	r3, r2
 8002806:	d100      	bne.n	800280a <memset+0xa>
 8002808:	4770      	bx	lr
 800280a:	f803 1b01 	strb.w	r1, [r3], #1
 800280e:	e7f9      	b.n	8002804 <memset+0x4>

08002810 <_init>:
 8002810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002812:	bf00      	nop
 8002814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002816:	bc08      	pop	{r3}
 8002818:	469e      	mov	lr, r3
 800281a:	4770      	bx	lr

0800281c <_fini>:
 800281c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281e:	bf00      	nop
 8002820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002822:	bc08      	pop	{r3}
 8002824:	469e      	mov	lr, r3
 8002826:	4770      	bx	lr
